import numpy
import math
import MyConst
from BodyGraphicsItem import BodyGraphicsItem
from PyQt5 import _QOpenGLFunctions_4_1_Core
from PyQt5.QtCore import pyqtSignal, QPoint, QSize, Qt, QTimer
from PyQt5.QtGui import QColor, QSurfaceFormat, QOpenGLVersionProfile, QMouseEvent, QWheelEvent
from PyQt5.QtWidgets import (QApplication, QHBoxLayout, QOpenGLWidget, QSlider,
        QWidget)
from OpenGL import GLU, GL, GLUT
class GUI(QWidget):
    """description of class"""
   
    def __init__(self, system, scaling):
        super(GUI,self).__init__()
        self.glwidget = myGLWidget(system,scaling)
        self.slider = self.createSlider()
        self.GraphicItems = []
        mainlayout = QHBoxLayout()
        mainlayout.addWidget(self.glwidget)
        mainlayout.addWidget(self.slider)        
        self.setLayout(mainlayout)
        self.set_System(system)
        self.set_Scaling(scaling)
        

        
        self.setWindowTitle(system.name)
        #
        
    def createSlider(self):
        slider = QSlider(Qt.Vertical)
        slider.setRange(0,360*16)
        slider.setSingleStep(16)
        slider.setPageStep(15*16)
        slider.setTickInterval(15*16)
        slider.setTickPosition(QSlider.TicksRight)
        return slider
     
    
    def set_System(self,system):
        self.system = system
    def set_Scaling(self,scaling):
        self.scaling = scaling

    
class myGLWidget(QOpenGLWidget):
    xRotationChanged = pyqtSignal(int)
    yRotationChanged = pyqtSignal(int)
    zRotationChanged = pyqtSignal(int)

    def __init__(self,system,scaling,parent = None):
        super(myGLWidget,self).__init__(parent)
        self.system = system
        self.scaling = scaling
        self.zoom = -10
        self.xRot = 0
        self.yRot = 0
        self.zRot = 0
        self.objects = []
        self.lastpos = QPoint()
        self.black = QColor.fromCmykF(1.0, 1.0, 1.0, 0.0)
        self.trolltechGreen = QColor.fromCmykF(0.40, 0.0, 1.0, 0.0)
        


    def minimumSizeHint(self):
        return QSize(50,50)

    def sizeHint(self):
        return QSize(800,600)
    
    def setXRotation(self,angle):
        angle = self.normalizeAngle(angle)
        if angle != self.xRot:
            self.xRot = angle
            self.xRotationChanged.emit(angle)
            self.update()

    def setYRotation(self,angle):
        angle = self.normalizeAngle(angle)
        if angle != self.yRot:
            self.yRot = angle
            self.yRotationChanged.emit(angle)
            self.update()

    def setZRotation(self,angle):
        angle = self.normalizeAngle(angle)
        if angle != self.zRot:
            self.zRot = angle
            self.zRotationChanged.emit(angle)
            self.update()

    def normalizeAngle(self,angle):
        while angle< 0:
            angle += 360*16
        while angle>360*16:
            angle -= 360*16
        return angle
   
    
    def initializeGL(self):
        
        self.C = self.context()
        f = QSurfaceFormat()
        q = QOpenGLVersionProfile(f)
        self.gl = self.C.versionFunctions(q)
        self.setClearColor(self.black)
     
        self.objects.append(self.drawSphere(1,3,3,3))
        
        self.gl.glShadeModel(self.gl.GL_FLAT)
        self.gl.glEnable(self.gl.GL_DEPTH_TEST)
        self.gl.glEnable(self.gl.GL_CULL_FACE)
        self.set_timer()
       
        
    def paintGL(self):
        self.gl.glClear(self.gl.GL_COLOR_BUFFER_BIT | self.gl.GL_DEPTH_BUFFER_BIT)
        self.gl.glLoadIdentity()
        self.gl.glTranslated(0.0, 0.0, self.zoom)
        self.gl.glRotated(self.xRot / 16.0, 1.0, 0.0, 0.0)
        self.gl.glRotated(self.yRot / 16.0, 0.0, 1.0, 0.0)
        self.gl.glRotated(self.zRot / 16.0, 0.0, 0.0, 1.0)
        for i in range(0,len(self.objects)):
            self.gl.glCallList(self.objects[i])


    def resizeGL(self,width,height):
        side = min(width,height)
        if side < 0:
            return
        self.gl.glViewport((width-side)//2,(height-side)//2,side,side)
        self.gl.glMatrixMode(self.gl.GL_PROJECTION)
        self.gl.glLoadIdentity()
        self.gl.glFrustum(-10, +10, -10, +10, 10, 30.0)
        self.gl.glMatrixMode(self.gl.GL_MODELVIEW)
        
    
    def mousePressEvent(self, event):
        self.lastpos = event.pos()
        
    
    def wheelEvent(self, event):

        numDegrees = event.angleDelta() / 8
        numSteps = (numDegrees/15)
        if numSteps.y() < 0:
            self.zoom += -0.5
        elif numSteps.y() > 0:
            self.zoom += 0.5
        self.update()
            
    def keyPressEvent(self, event):
        pass
        
    
    def mouseMoveEvent(self, event):
        dx = event.x() - self.lastpos.x()
        dy = event.y() - self.lastpos.y()

        if event.buttons() & Qt.LeftButton:
            self.setXRotation(self.xRot+ 8*dy)
            self.setYRotation(self.yRot +8*dx)
        elif event.buttons() & Qt.RightButton:
            self.setXRotation(self.xRot+ 8*dy)
            self.setZRotation(self.zRot+ 8*dx)
        self.lastpos = event.pos()    

    def Cube(self):
 
        genList = self.gl.glGenLists(1)
        self.gl.glNewList(genList,self.gl.GL_COMPILE)
        self.gl.glBegin(self.gl.GL_QUADS)
        for surface in MyConst.surfaces:
            x = 0
            for vertex in surface:
                x +=1
                self.setColor(QColor.fromCmykF(MyConst.colors[x][0], MyConst.colors[x][1], MyConst.colors[x][2], 0.0))
                self.gl.glVertex3d(MyConst.vertices[vertex][0],MyConst.vertices[vertex][1],MyConst.vertices[vertex][2])
        self.gl.glEnd()
        self.gl.glBegin(self.gl.GL_LINES)
        for edge in MyConst.edges:
            for vertex in edge:
                self.gl.glVertex3d(MyConst.vertices[vertex][0],MyConst.vertices[vertex][1],MyConst.vertices[vertex][2])
        self.gl.glEnd()
        self.gl.glEndList()
        return genList

    def updateObjects(self,bodies):
        "Removes the old objects and updates the objects-to-be-drawn and calls the update function"
        self.objects = []
        for item in bodies:
            self.objects.append(self.drawSphere(1,item.x,item.y,item.z))
        
        self.update()



    def drawSphere(self,radius,center_x,center_y,center_z):
        "returns a sphere with given radius and location"
        genList = self.gl.glGenLists(1)
        self.gl.glNewList(genList,self.gl.GL_COMPILE)
   
        lats = 360
        longs = 360
        
        for i in range(0,lats):
            lat0 = math.pi * (-0.5+(i-1)/lats)
            z0 = radius*math.sin(lat0)
            zr0 = math.cos(lat0)
            lat1 = math.pi * (-0.5+(i)/lats)
            z1 = radius*math.sin(lat1)
            zr1 = math.cos(lat1)
            self.gl.glBegin(self.gl.GL_QUAD_STRIP)
            for j in range(0,longs):
                lng = 2*math.pi*(j-1)/longs
                x = radius*math.cos(lng)
                y = radius*math.sin(lng)
                self.setColor(self.trolltechGreen)
                self.gl.glNormal3f(center_x+x*zr0, center_y+y*zr0, center_z+z0)
                self.gl.glVertex3f(center_x+x*zr0, center_y+y*zr0, center_z+z0)
                self.gl.glNormal3f(center_x+x*zr1, center_y+y*zr1, center_z+z1)
                self.gl.glVertex3f(center_x+x*zr1, center_y+y*zr1, center_z+z1)
            self.gl.glEnd()
        
        self.gl.glEndList()
        return genList

    def setClearColor(self, c):
        self.gl.glClearColor(c.redF(), c.greenF(), c.blueF(), c.alphaF())

    def setColor(self,c):
        self.gl.glColor4f(c.redF(), c.greenF(), c.blueF(), c.alphaF())

    def Simulate(self):
        self.system.simulate(1)
        self.updateBodies()
        self.updateObjects(self.GraphicItems)

    def updateBodies(self):
        self.GraphicItems = []
        bodies = self.system.get_objects()
        for item in bodies:
            body = BodyGraphicsItem(self.scaling*item.location.get_x(),self.scaling*item.location.get_y(),self.scaling*item.location.get_z(),item.radius)
            self.GraphicItems.append(body)
    
    def set_timer(self):
        GLUT.glutTimerFunc(100,self.Simulate())
        